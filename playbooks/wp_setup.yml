---

- hosts: wp_hosts
  become: true
  become_method: sudo
  gather_facts: true
  #gather_facts: false

  roles:
    - role: dockerhost
      vars:
        docker_users:
          - "{{ default_ansible_user }}"
        cert_bot_email: "{{ default_email }}"

  tasks:
    
    #- name: "Show OS Versions"
    #  ansible.builtin.debug:
    #    msg:

    - name: Distribution
      debug: msg="{{ ansible_distribution }}"
    - name: Distribution version
      debug: msg="{{ ansible_distribution_version}}"
    - name: Distribution major version
      debug: msg="{{ ansible_distribution_major_version }}"

    - name: "Install restic"
      ansible.builtin.apt:
        name: restic
        state: present

    # TODO: Do I want to update restic every time I run this?
    # How often do I run this?
    # I need to do this at least initially
    # I removed this as newer versions of Ubuntu (e.g. 24 don't have this command)
    # instead it is managed through apt. It is probably fine to use apt
    # on older versions of ubuntu to manage this too? Or maybe, enable only on
    # older versions of Ubuntu?
    #- name: "Update restic"
    #  ansible.builtin.command: restic self-update
    
    # TODO: maybe I should just remove the wp_backup.yml, and wp_update.yml
    # as this basically does it all. Would I want to do backups without updating?
    #these playbooks loop over sites on a host and apply the wp_update_site.yml
    #wp_backup_site.yml plays.
    - name: "Restore sites from backup if needed"
      ansible.builtin.include_tasks:
        file: wp_restore_site_from_backup_if_needed.yml
      loop: "{{ sites }}"
      loop_control:
        label: "{{ item.id }}"
      vars:
        site: "{{ item }}"

    - name: "Create site directories as needed"
      ansible.builtin.file:
        path: "/home/{{ default_ansible_user }}/{{ item.id }}/"
        state: directory
        owner: "{{ default_ansible_user }}"
        group: "{{ default_ansible_user }}"
      loop: "{{ sites }}"
      loop_control:
        label: "{{ item.id }}"

    - name: "Create Wordpress volume directories as needed"
      ansible.builtin.file:
        path: "/home/{{ default_ansible_user }}/{{ item.id }}/volumes/wp"
        state: directory
        owner: "www-data"
        group: "www-data"
      loop: "{{ sites }}"
      loop_control:
        label: "{{ item.id }}"

    - name: "Create database volume directories as needed"
      ansible.builtin.file:
        path: "/home/{{ default_ansible_user }}/{{ item.id }}/volumes/db"
        state: directory
        owner: "lxd"
        group: "docker"
      loop: "{{ sites }}"
      loop_control:
        label: "{{ item.id }}"
      when: ansible_distribution_major_version | int<24
    
    #NOTE: lxd user doesn't seem to exist on Ubuntu 24 as it did on 22
    #docker hub image page for mysql doesn't list "lxd" user, did it before?
    - name: "Create database volume directories as needed"
      ansible.builtin.file:
        path: "/home/{{ default_ansible_user }}/{{ item.id }}/volumes/db"
        state: directory
        owner: "{{ default_ansible_user }}"
        group: "{{ default_ansible_user }}"
      loop: "{{ sites }}"
      loop_control:
        label: "{{ item.id }}"
      when: ansible_distribution_major_version | int>=24
    
    #TODO: do I want to use docker secrets instead of environment variables
    # I was doing that initially, but switched to environment variables as
    # they were a bit simpler. The choice really is to have randomly created
    # passwords for databases in plain text on the docker host VM or use
    # environment variables passed to the containers.
    # Using docker secrets might be slightly better? But which to choose isn't
    # obvious.

    #- name: "Create database root password"
    #  ansible.builtin.include_tasks:
    #    file: create_file_if_does_not_exist.yml
    #  loop: "{{ sites }}"
    #  loop_control:
    #    label: "{{ item.id }}"
    #  vars:
    #    path: "/home/{{ default_ansible_user }}/{{ item.id }}/db_root_password"
    #    content: "{{ lookup('ansible.builtin.password','/dev/null') }}"
    #    owner: "{{ default_ansible_user }}"
    #    group: "{{ default_ansible_user }}"

    #- name: "Create database user password"
    #  ansible.builtin.include_tasks:
    #    file: create_file_if_does_not_exist.yml
    #  loop: "{{ sites }}"
    #  loop_control:
    #    label: "{{ item.id }}"
    #  vars:
    #    path: "/home/{{ default_ansible_user }}/{{ item.id }}/db_user_password"
    #    content: "{{ lookup('ansible.builtin.password','/dev/null') }}"
    #    owner: "{{ default_ansible_user }}"
    #    group: "{{ default_ansible_user }}"

    - name: "Create docker compose .env file for sites"
      ansible.builtin.template:
        src: "docker_compose_env.j2"
        dest: "/home/{{ default_ansible_user }}/{{ item.id }}/.env"
        owner: "{{ default_ansible_user }}"
        group: "{{ default_ansible_user }}"
      loop: "{{ sites }}"
      loop_control:
        label: "{{ item.id }}"
      register: env_file_results

    - name: "Bring compose project down if .env file changed"
      ansible.builtin.include_tasks:
        file: compose_down.yml
      loop: "{{ sites }}"
      loop_control:
        label: "{{ item.id }}"
        index_var: site_index
      vars:
        project_id: "{{ item.id }}"
      when: env_file_results.results[site_index].changed

    - name: "Copy docker compose file"
      ansible.builtin.copy:
        src: "docker-compose.yml"
        dest: "/home/{{ default_ansible_user }}/docker-compose.yml"
        owner: "{{ default_ansible_user }}"
        group: "{{ default_ansible_user }}"

    - name: "Bring compose projects up if needed"
      ansible.builtin.include_tasks:
        file: compose_up_if_needed.yml
      loop: "{{ sites }}"
      loop_control:
        label: "{{ item.id }}"
      vars:
        site: "{{ item }}"

    - name: "Load database if restoring from backup"
      ansible.builtin.include_tasks:
        file: wp_load_database.yml
      loop: "{{ sites }}"
      loop_control:
        label: "{{ site.id }}"
      vars:
        site: "{{ item }}"
      when: restored[site.id]

    - name: "Install Wordpress core if needed"
      ansible.builtin.include_tasks:
        file: wp_install_core_if_needed.yml
      loop: "{{ sites }}"
      loop_control:
        label: "{{ item.id }}"
      vars:
        site: "{{ item }}"

    - name: "Ensure only specified themes installed"
      ansible.builtin.include_tasks:
        file: wp_ensure_only_specified_themes_installed.yml
      loop: "{{ sites }}"
      loop_control:
        label: "{{ item.id }}"
      vars:
        site: "{{ item }}"

    - name: "Ensure only specified plugins installed"
      ansible.builtin.include_tasks:
        file: wp_ensure_only_specified_plugins_installed.yml
      loop: "{{ sites }}"
      loop_control:
        label: "{{ item.id }}"
      vars:
        site: "{{ item }}"

    - name: "Ensure site URLs correct"
      ansible.builtin.include_tasks:
        file: wp_ensure_site_url.yml
      loop: "{{ sites }}"
      loop_control:
        label: "{{ item.id }}"
      vars:
        site: "{{ item }}"

    - ansible.builtin.debug:
        msg: "site.wp_settings.perform_backup is defined={{ site.wp_settings.perform_backup is defined }}"

    - ansible.builtin.debug:
        msg: "site.wp_settings.perform_backup ={{ site.wp_settings.perform_backup }}"
      when: site.wp_settings.perform_backup is defined

    - name: "Configure wp/.htaccess for sites"
      ansible.builtin.blockinfile:
        path: "./{{ site.id }}/volumes/wp/.htaccess"
        block: "{{ site.wp_settings.htaccess }}"
      loop: "{{ sites }}"
      loop_control:
        label: "{{ site.id }}"
      vars:
        site: "{{ item }}"
      when: site.wp_settings.htaccess is defined
      register: htaccess_result

    - name: "Bring compose project down if .htacces file changed"
      ansible.builtin.include_tasks:
        file: compose_down.yml
      loop: "{{ sites }}"
      loop_control:
        label: "{{ item.id }}"
        index_var: site_index
      vars:
        project_id: "{{ item.id }}"
      when: htaccess_result.results[site_index].changed

    - name: "Bring compose projects up if needed"
      ansible.builtin.include_tasks:
        file: compose_up_if_needed.yml
      loop: "{{ sites }}"
      loop_control:
        label: "{{ item.id }}"
        index_var: site_index
      vars:
        site: "{{ item }}"
      when: htaccess_result.results[site_index].changed

    - name: "Backup Wordpress sites"
      ansible.builtin.include_tasks:
        file: wp_backup_site.yml
      loop: "{{ sites }}"
      loop_control:
        label: "{{ item.id }}"
      vars:
        site: "{{ item }}"
      when: not (site.wp_settings.perform_backup is defined) or site.wp_settings.perform_backup

    - name: "Update Wordpress sites"
      ansible.builtin.include_tasks:
        file: wp_update_site.yml
      loop: "{{ sites }}"
      loop_control:
        label: "{{ item.id }}"
      vars:
        site: "{{ item }}"
