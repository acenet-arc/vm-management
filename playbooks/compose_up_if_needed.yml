- name: "Get compose statuses"
  ansible.builtin.command: docker compose -f {{ compose_file }} ls --format json --filter name="^{{ site.id }}$"
  register: compose_ls
  changed_when: false

- name: "Initialize statuses dictionary to empty dictionary"
  ansible.builtin.set_fact:
    statuses: "{{ {} }}"

- name: "Parse compose status output"
  ansible.builtin.set_fact:
    statuses: "{{ statuses|combine({
      compose_item.Name:{'status':compose_item.Status}
      }) }}"
  loop: "{{ compose_ls.stdout }}"
  loop_control:
    loop_var: compose_item

- name: "Initialize needs_up to true"
  ansible.builtin.set_fact:
    needs_up: true

#- ansible.builtin.debug:
#    msg: "site.id={{ site.id }} statuses={{ statuses }}"

- name: "If compose project, {{ site.id }}, had a status, check that it is running"
  ansible.builtin.set_fact:
    needs_up: "{{ statuses[site.id].status !='running(2)' }}"
  when: site.id in statuses

#- ansible.builtin.debug:
#    msg: "needs_up={{ needs_up }}"

- name:  "Bring compose project, {{ site.id }}, up if not already up"
  ansible.builtin.command: docker compose -f {{ compose_file }} -p {{ site.id }} up --build -d
  environment:
    DB_USER: "{{ site.database.db_user | default(default_db_user) }}"
    DB_PASSWORD: "{{ site.database.db_user_password | default(default_db_user_password) }}"
    DB_NAME: "{{ site.database.db_name | default(default_db_name) }}"
    DB_ROOT_PASSWORD: "{{ site.database.db_root_password | default(default_db_root_password) }}"
    SITE_NAME: "{{ site.id }}"
    LOCAL_PORT: "{{ site.port }}"
    WORDPRESS_DISSALLOW_FILE_MODS: "{{ site.wp_settings.config.dissallow_file_mods | default(wp_default_dissallow_file_mods) }}"
    WORDPRESS_AUTO_UPDATE_CORE: "{{ site.wp_settings.config.auto_update_core | default(wp_default_auto_update_core) }}"
    WORDPRESS_FORCE_SSL_ADMIN: "{{ site.wp_settings.config.force_ssl_admin | default(wp_default_force_ssl_admin) }}"
    
  when: needs_up
